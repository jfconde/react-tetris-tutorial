{"version":3,"sources":["Row.jsx","Block.jsx","util.js","Board.jsx","App.js","serviceWorker.js","index.js"],"names":["Row","_ref","children","react_default","a","createElement","className","Block","type","concat","tetrominos","rotateTetrominoMatrix","matrix","map","row","y","col","x","tetrominoMatrixCollides","board","tetromino","some","block","mergeBoardAndTetromino","tetrominoMatrixOutOfBounds","width","height","reduce","res","o1","o2","res2","top","left","right","bottom","cleanClearedLines","arguments","length","undefined","lineWidth","withoutLinesBoard","filter","every","b","Object","toConsumableArray","Array","fill","i","initialBoard","getNewTetromino","BOARD_WIDTH","Math","round","random","Board","_useState","useState","_useState2","slicedToArray","setBoard","_useState3","_useState4","virtualBoard","setVirtualBoard","_useState5","_useState6","currentTetromino","setCurrentTetromino","_useState7","_useState8","lastMove","setLastMove","_useState9","_useState10","timeout","setMoveTimeout","currentBoardElement","resetMoveTimeout","clearTimeout","setTimeout","useEffect","focus","attemptToRotateTetromino","n","objectSpread","boundsObj","attemptToMoveDownTetromino","toBottom","attemptToMoveTetromino","boundsViolation","tabIndex","ref","el","onKeyDown","event","key","src_Row","j","src_Block","App","src_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19f275b2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Row = ({children}) => {\n    return (\n        <div className=\"row\">\n            {children}\n        </div>\n    );\n};\n\nexport default Row;","import React from 'react';\n\nconst Block = ({type}) => {\n    return (\n        <div className={`block ${type}`}>\n        </div>\n    );\n};\n\nexport default Block;","const tetrominos = [\n    [\n        [null, null, null, null],\n        [null, 'o', 'o', null],\n        [null, 'o', 'o', null],\n        [null, null, null, null]\n    ],\n    [\n        [null, null, null, null],\n        [null, null, 's2', null],\n        [null, 's2', 's2', null],\n        [null, 's2', null, null]\n    ],\n    [\n        [null, null, null, null],\n        [null, 's', null, null],\n        [null, 's', 's', null],\n        [null, null, 's', null]\n    ],\n    [\n        [null, null, null, null],\n        [null, 't', null, null],\n        ['t', 't', 't', null],\n        [null, null, null, null]\n    ],\n    [\n        [null, 'i', null, null],\n        [null, 'i', null, null],\n        [null, 'i', null, null],\n        [null, 'i', null, null]\n    ],\n    [\n        [null, null, null, null],\n        [null, 'l', null, null],\n        [null, 'l', null, null],\n        [null, 'l', 'l', null]\n    ],\n    [\n        [null, null, null, null],\n        [null, null, 'j', null],\n        [null, null, 'j', null],\n        [null, 'j', 'j', null]\n    ]\n];\n\nexport const getRandomTetromino = () => tetrominos[Math.round(Math.random() * (tetrominos.length - 1))];\nexport const rotateTetrominoMatrix = matrix => matrix.map((row, y) => row.map((col, x) => matrix[3 - x][y]));\nexport const tetrominoMatrixCollides = (board, tetromino) => {\n    return tetromino.matrix.some((row, y) =>\n        row.some((block, x) =>\n            tetromino.matrix[y][x] && board[y + tetromino.y] && board[y + tetromino.y][x + tetromino.x])\n    );\n};\nexport const mergeBoardAndTetromino = (board, tetromino) => board\n    .map((row, y) =>\n        row.map((block, x) =>\n            (tetromino.matrix[y - tetromino.y] && tetromino.matrix[y - tetromino.y][x - tetromino.x]) ||\n            block\n        )\n    );\n\nconst mergeBoundsObject = (o1, o2) => ({\n    top   : o1.top || o2.top,\n    left  : o1.left || o2.left,\n    bottom: o1.bottom || o2.bottom,\n    right : o1.right || o2.right\n});\n\nexport const tetrominoMatrixOutOfBounds = (tetromino, width, height) =>\n    tetromino.matrix.reduce(\n        (res, row, y) => mergeBoundsObject(res, row.reduce((res2, block, x) => ({\n            top   : res2.top || (block && y + tetromino.y < 0),\n            left  : res2.left || (block && x + tetromino.x < 0),\n            right : res2.right || (block && x + tetromino.x >= width),\n            bottom: res2.bottom || (block && y + tetromino.y >= height)\n        }), {})),\n        {}\n    );\n\nexport const cleanClearedLines = (board = [], lineWidth) => {\n    const withoutLinesBoard = board.filter(row => !row.every(b => !!b));\n    return [\n        ...new Array(board.length - withoutLinesBoard.length).fill(null).map(i => new Array(lineWidth).fill(null)),\n        ...withoutLinesBoard\n    ];\n};","import React, {useState, useEffect} from 'react';\nimport Row from './Row';\nimport Block from './Block';\nimport {\n    getRandomTetromino,\n    rotateTetrominoMatrix,\n    tetrominoMatrixCollides,\n    mergeBoardAndTetromino,\n    tetrominoMatrixOutOfBounds,\n    cleanClearedLines\n} from \"./util\";\n\nconst BOARD_WIDTH = 10;\nconst BOARD_HEIGHT = 20;\n\nconst initialBoard = new Array(BOARD_HEIGHT).fill(null).map(i => new Array(BOARD_WIDTH).fill(null));\n\nconst getNewTetromino = () => ({\n    x     : (BOARD_WIDTH / 2) - 2,\n    y     : -1,\n    matrix: getRandomTetromino()\n});\n\nconst Board = () => {\n    const [board, setBoard] = useState(initialBoard);\n    const [virtualBoard, setVirtualBoard] = useState(board);\n    const [currentTetromino, setCurrentTetromino] = useState(getNewTetromino());\n    const [lastMove, setLastMove] = useState(0);\n    const [timeout, setMoveTimeout] = useState(null);\n    let currentBoardElement = null;\n    const resetMoveTimeout = () => { clearTimeout(timeout); setMoveTimeout(setTimeout(() => setLastMove(lastMove+1), 500)); };\n\n    useEffect(() => { currentBoardElement && currentBoardElement.focus(); }, []);\n\n    useEffect(() => setVirtualBoard(board.map((row, y) =>\n        row.map((block, x) => block || (currentTetromino.matrix[y - currentTetromino.y] && currentTetromino.matrix[y - currentTetromino.y][x - currentTetromino.x]) || null)\n    )), [board, currentTetromino]);\n\n    const attemptToRotateTetromino = (n) => {\n        let matrix = [...currentTetromino.matrix];\n        for (let i = 0; i < n; i++) {\n            matrix = rotateTetrominoMatrix(matrix);\n        }\n        const tetromino = {...currentTetromino, matrix};\n        const boundsObj = tetrominoMatrixOutOfBounds(tetromino, BOARD_WIDTH, BOARD_HEIGHT);\n        !tetrominoMatrixCollides(board, tetromino) && !boundsObj.left && !boundsObj.right && !boundsObj.bottom && (resetMoveTimeout() || setCurrentTetromino(tetromino));\n    };\n\n    const attemptToMoveDownTetromino = (toBottom = false) => {\n        let tetromino = {...currentTetromino, y: currentTetromino.y + 1};\n        if (toBottom) {\n            while (\n                !tetrominoMatrixOutOfBounds(tetromino, BOARD_WIDTH, BOARD_HEIGHT).bottom &&\n                !tetrominoMatrixCollides(board, tetromino)\n                ) {\n                tetromino = {...tetromino, y: tetromino.y + 1}\n            }\n            tetromino.y -= 1;\n            setBoard(cleanClearedLines(mergeBoardAndTetromino(board, tetromino), BOARD_WIDTH));\n            setCurrentTetromino(getNewTetromino());\n            resetMoveTimeout();\n            return false;\n        }\n\n        if (tetrominoMatrixOutOfBounds(tetromino, BOARD_WIDTH, BOARD_HEIGHT).bottom\n            || tetrominoMatrixCollides(board, tetromino)\n        ) {\n            setBoard(cleanClearedLines(mergeBoardAndTetromino(board, currentTetromino), BOARD_WIDTH));\n            setCurrentTetromino(getNewTetromino());\n            resetMoveTimeout();\n            return false;\n        } else {\n            setCurrentTetromino(tetromino);\n            resetMoveTimeout();\n            return true;\n        }\n    };\n\n    useEffect(() => {\n        var x = lastMove;\n        attemptToMoveDownTetromino();\n    }, [lastMove]);\n\n\n    const attemptToMoveTetromino = (right = true) => {\n        const tetromino = {...currentTetromino, x: currentTetromino.x + (right ? 1 : -1)};\n        const boundsViolation = tetrominoMatrixOutOfBounds(tetromino, BOARD_WIDTH, BOARD_HEIGHT);\n\n        if (!boundsViolation.left && !boundsViolation.right && !tetrominoMatrixCollides(board, tetromino)) {\n            setCurrentTetromino(tetromino);\n            return true;\n        }\n        return false;\n    };\n\n\n    const onKeyDownHandler = (event) => {\n        switch (event.key) {\n            case 's':\n            case 'ArrowDown':\n                attemptToMoveDownTetromino();\n                break;\n            case 'a':\n            case 'ArrowLeft':\n                attemptToMoveTetromino(false);\n                break;\n            case 'd':\n            case 'ArrowRight':\n                attemptToMoveTetromino(true);\n                break;\n            case 'j':\n                attemptToRotateTetromino(3);\n                break;\n            case 'k':\n                attemptToRotateTetromino(1);\n                break;\n            case ' ':\n                attemptToMoveDownTetromino(true);\n                break;\n        }\n    };\n\n    return (\n        <div className=\"tetris-board\"\n             tabIndex=\"0\"\n             ref={el => currentBoardElement = el}\n             onKeyDown={onKeyDownHandler}\n        >\n            {\n                virtualBoard.map(\n                    (row, i) => (\n                        <Row key={i}>\n                            {\n                                row.map(\n                                    (block, j) => (\n                                        <Block key={[i, j]} type={block}/>\n                                    ))\n                            }\n                        </Row>\n                    ))\n            }\n        </div>\n    );\n};\n\nexport default Board;","import React from 'react';\nimport './App.css';\nimport Board from './Board'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Board />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}